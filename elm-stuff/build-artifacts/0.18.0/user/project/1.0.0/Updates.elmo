var _user$project$Updates$makeConstant = function (iPlayer) {
	var _p0 = iPlayer;
	if (_p0.ctor === 'Changing') {
		return _user$project$Models$Constant(_p0._0);
	} else {
		return iPlayer;
	}
};
var _user$project$Updates$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'OnLocationChange':
				var _p2 = _p1._0;
				switch (_p2.ctor) {
					case 'Init':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{mode: _user$project$Models$Init}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Watch':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									mode: A2(_user$project$Models$Watch, _p2._0, _p2._1)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Lobby':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									mode: _user$project$Models$Lobby(_p2._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									mode: A2(_user$project$Models$Play, _p2._0, _p2._1)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
				}
			case 'PlayerChange':
				var _p3 = _p1._0;
				if (_p3.ctor === 'Update') {
					var _p4 = model.player;
					if (_p4.ctor === 'Changing') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									player: _user$project$Models$Changing(_p3._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					var pl = _user$project$Updates$makeConstant(model.player);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{player: pl}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'GameUpdate':
				var mNewGame = _user$project$Game_Update$updateGame(_p1._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{game: mNewGame}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchGame':
				var _p12 = _p1._1;
				var _p5 = model.mode;
				switch (_p5.ctor) {
					case 'Init':
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					case 'Play':
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: A2(_user$project$Commands$fetchGame, _p5._0, _p5._1)
						};
					case 'Watch':
						var _p11 = _p5._1;
						var _p10 = _p5._0;
						var _p6 = _p1._0;
						if (_p6.ctor === 'Nothing') {
							var _p7 = _p12;
							if (_p7.ctor === 'Nothing') {
								return {
									ctor: '_Tuple2',
									_0: model,
									_1: A3(
										_user$project$Commands$fetchWatch,
										_p10,
										_p11,
										{ctor: '_Tuple2', _0: 0, _1: 0})
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: model,
									_1: A3(
										_user$project$Commands$fetchWatch,
										_p10,
										_p7._0,
										{ctor: '_Tuple2', _0: 0, _1: 0})
								};
							}
						} else {
							var _p9 = _p6._0;
							var _p8 = _p12;
							if (_p8.ctor === 'Nothing') {
								return {
									ctor: '_Tuple2',
									_0: model,
									_1: A3(_user$project$Commands$fetchWatch, _p10, _p11, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: model,
									_1: A3(_user$project$Commands$fetchWatch, _p10, _p8._0, _p9)
								};
							}
						}
					default:
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _user$project$Commands$fetchLobby(_p5._0)
						};
				}
			case 'GameIdUpdate':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							gameId: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{windowSize: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
