var _user$project$Commands$gameObject = F4(
	function (round, turn, gameId, player) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'round',
					_1: _elm_lang$core$Json_Encode$int(round)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'turn',
						_1: _elm_lang$core$Json_Encode$int(turn)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'gameId',
							_1: _elm_lang$core$Json_Encode$string(gameId)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'player',
								_1: _elm_lang$core$Json_Encode$string(player)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$Commands$encodeGame = F4(
	function (round, turn, gameId, player) {
		return A2(
			_elm_lang$core$Json_Encode$encode,
			4,
			A4(_user$project$Commands$gameObject, round, turn, gameId, player));
	});
var _user$project$Commands$fetchGame = F3(
	function (gameId, _p0, player) {
		var _p1 = _p0;
		return A2(
			_elm_lang$websocket$WebSocket$send,
			_user$project$Globals$serverUrl,
			A4(_user$project$Commands$encodeGame, _p1._0, _p1._1, gameId, player));
	});
var _user$project$Commands$getWindowSize = A2(_elm_lang$core$Task$perform, _user$project$Msgs$SizeUpdated, _elm_lang$window$Window$size);
