var _user$project$Game_Watch_Game$prevRound = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1._1;
	var _p2 = _p1._0;
	return _elm_lang$core$Native_Utils.eq(_p3, 0) ? {ctor: '_Tuple2', _0: _p2 - 1, _1: 4} : {ctor: '_Tuple2', _0: _p2, _1: _p3 - 1};
};
var _user$project$Game_Watch_Game$isBegin = function (_p4) {
	var _p5 = _p4;
	return _elm_lang$core$Native_Utils.eq(_p5._0, 0) && _elm_lang$core$Native_Utils.eq(_p5._1, 0);
};
var _user$project$Game_Watch_Game$prev = F2(
	function (player, gameCoord) {
		return (!_user$project$Game_Watch_Game$isBegin(gameCoord)) ? A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(
					A2(_elm_lang$core$Basics_ops['++'], _user$project$Globals$imgSourcePath, 'left_arrow.png')),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						A3(
							_user$project$Msgs$FetchGame,
							_elm_lang$core$Maybe$Just(
								_user$project$Game_Watch_Game$prevRound(gameCoord)),
							_elm_lang$core$Maybe$Just(player),
							_user$project$Game_Model$NoAction)),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}) : A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _user$project$Game_Watch_Game$nextRound = function (_p6) {
	var _p7 = _p6;
	var _p9 = _p7._1;
	var _p8 = _p7._0;
	return _elm_lang$core$Native_Utils.eq(_p9, 4) ? {ctor: '_Tuple2', _0: _p8 + 1, _1: 0} : {ctor: '_Tuple2', _0: _p8, _1: _p9 + 1};
};
var _user$project$Game_Watch_Game$isEnd = function (_p10) {
	var _p11 = _p10;
	return _elm_lang$core$Native_Utils.eq(_p11._0, 9) && _elm_lang$core$Native_Utils.eq(_p11._1, 0);
};
var _user$project$Game_Watch_Game$next = F2(
	function (player, gameCoord) {
		return (!_user$project$Game_Watch_Game$isEnd(gameCoord)) ? A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(
					A2(_elm_lang$core$Basics_ops['++'], _user$project$Globals$imgSourcePath, 'right_arrow.png')),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						A3(
							_user$project$Msgs$FetchGame,
							_elm_lang$core$Maybe$Just(
								_user$project$Game_Watch_Game$nextRound(gameCoord)),
							_elm_lang$core$Maybe$Just(player),
							_user$project$Game_Model$NoAction)),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}) : A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _user$project$Game_Watch_Game$nav = F2(
	function (player, gameCoord) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(_user$project$Game_Watch_Game$prev, player, gameCoord),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Game_Watch_Game$next, player, gameCoord),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Game_Watch_Game$viewGameType = function (gameType) {
	var _p12 = gameType;
	switch (_p12.ctor) {
		case 'NoGameType':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(
								A2(_elm_lang$core$Basics_ops['++'], _user$project$Globals$imgSourcePath, 'question_mark.png')),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		case 'Swap':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(
								A2(_elm_lang$core$Basics_ops['++'], _user$project$Globals$imgSourcePath, 'swap_icon.png')),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		case 'Up':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(
								A2(_elm_lang$core$Basics_ops['++'], _user$project$Globals$imgSourcePath, 'obenabe.png')),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		case 'Down':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(
								A2(_elm_lang$core$Basics_ops['++'], _user$project$Globals$imgSourcePath, 'undenufe.png')),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Globals$imgSourcePath,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Game_Translate$colorTranslate(_p12._0),
										'_icon.png'))),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
	}
};
var _user$project$Game_Watch_Game$viewGame = function (game) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _user$project$Game_Watch_Game$viewGameType(game.gameType),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(game.activePlayer),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h2,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Round #',
									_elm_lang$core$Basics$toString(
										{ctor: '_Tuple2', _0: game.round, _1: game.turn}))),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_user$project$Game_Watch_Game$nav,
									game.activePlayer,
									{ctor: '_Tuple2', _0: game.round, _1: game.turn}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ol,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('list-reset'),
									_1: {ctor: '[]'}
								},
								_user$project$Game_Watch_Players$viewPlayerCards(game.cardsPlayer)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$ol,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('list-reset'),
										_1: {ctor: '[]'}
									},
									A4(
										_user$project$Game_Watch_Players$viewPlayers,
										{ctor: '_Tuple2', _0: game.round, _1: game.turn},
										game.activePlayer,
										game.onTurnPlayer,
										game.players)),
								_1: {
									ctor: '::',
									_0: _user$project$Game_Watch_Table$viewTable(game.table),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _user$project$Game_Watch_Groups$viewGroup(
													_elm_lang$core$List$head(game.groups)),
												_1: {
													ctor: '::',
													_0: _user$project$Game_Watch_Groups$viewGroup(
														_elm_lang$core$List$head(
															_user$project$Game_Watch_Groups$unwrapMaybeGroups(
																_elm_lang$core$List$tail(game.groups)))),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Game_Watch_Game$init = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					A3(_user$project$Msgs$FetchGame, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _user$project$Game_Model$NoAction)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Start Game'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
